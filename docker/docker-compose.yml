version: '3'

services:
  #docker.traefik:
  #  container_name: docker.traefik
  #  hostname: docker.traefik
  #  image: traefik:latest
  #  ports:
  #    - 80:80
  #    - 443:443
  #    - 8080:8080
  #  volumes:
  #    - /var/run/docker.sock:/var/run/docker.sock
  #    - ../var/logs/traefik/:/var/log/traefik/
  #  networks:
  #    - docker.net
  #  command:
  #    - "--api.insecure=true"
  #    - "--log.level=DEBUG"
  #    - "--providers.docker=true"
  #    - "--providers.docker.exposedbydefault=true"
  #    - "--entrypoints.web.address=:80"
  #
  #docker.portainer:
  #  container_name: docker.portainer
  #  hostname: docker.portainer
  #  image: portainer/portainer-ce:latest
  #  ports:
  #    - 9001:9000
  #  volumes:
  #    - "/var/run/docker.sock:/var/run/docker.sock"
  #    - ../.data/portainer/:/data
  #  networks:
  #    - docker.net

  docker.web:
    container_name: docker.web
    hostname: docker.web
    build: .
    ports:
      - '${APP_PORT:-80}:80'
    environment:
      WWWUSER: '${WWWUSER:-1000}'
      WWWGROUP: '${WWWGROUP:-1000}'
      TZ: '${TZ:-Indian/Mauritius}'
    volumes:
     - '../public_html:/var/www/html'
    networks:
      - docker.net
    depends_on:
      - docker.db

  docker.db:
    container_name: docker.db
    hostname: docker.db
    image: 'mariadb:10'
    ports:
      - '${FORWARD_DB_PORT:-3306}:3306'
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    volumes:
      - 'docker.db.vol:/var/lib/mysql'
    networks:
      - docker.net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
      retries: 3
      timeout: 5s

  docker.mailhog:
    container_name: docker.mailhog
    hostname: docker.mailhog
    image: 'mailhog/mailhog:latest'
    ports:
      - '${FORWARD_MAILHOG_PORT:-1025}:1025'
      - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
    networks:
      - docker.net

networks:
  docker.net:
    driver: bridge

volumes:
  docker.db.vol:
    driver: local
